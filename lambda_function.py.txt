import urllib2
import json
from StringIO import StringIO


def lambda_handler(event, context):
    if (event["session"]["application"]["applicationId"] !=
            "amzn1.ask.skill.19efa27c-9b32-4b8c-8301-99ce62ed6b5c"):
        raise ValueError("Invalid Application ID")
    
    if event["session"]["new"]:
        on_session_started({"requestId": event["request"]["requestId"]}, event["session"])

    if event["request"]["type"] == "LaunchRequest":
        return on_launch(event["request"], event["session"])
    elif event["request"]["type"] == "IntentRequest":
        return on_intent(event["request"], event["session"])
    elif event["request"]["type"] == "SessionEndedRequest":
        return on_session_ended(event["request"], event["session"])
        

def on_session_started(session_started_request, session):
    print ("Starting new session.")

def on_launch(launch_request, session):
    return get_welcome_response()
    

def on_intent(intent_request, session):
    
    intent = intent_request["intent"]
    intent_name = intent_request["intent"]["name"]
    
    
    if intent_name == "details":
        return  get_location_details()
         
    if intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")
        
def on_session_ended(session_ended_request, session):
    print ("Ending session.")
    # Cleanup goes here...

def handle_session_end_request():
    card_title = "Location - Thanks"
    speech_output = "Thank you for using this skill.  See you next time!"
    should_end_session = True

    return build_response({}, build_speechlet_response(card_title, speech_output, None, should_end_session))
    


    
def get_welcome_response():
    session_attributes = {}
    card_title = "Location"
    speech_output = "Welcome to the Alexa Location skill. " 
                    
    reprompt_text = "Please ask me for location details "
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
'''
@ask.intent("GetDetails")        
'''
def get_location_details():
    session_attributes = {}
    card_title = "Location Details"
    reprompt_text = ""
    should_end_session = False

    
    
    response_data = urllib2.urlopen("http://35.190.128.204:8080/")
    
    #loc_details = json.load(response_data)
    
    
    
    #speech_output = loc_details["outputSpeech"]["text"]
    speech_output = response_data.read()
    
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        "outputSpeech": {
            "type": "PlainText",
            "text": output
        },
        "card": {
            "type": "Simple",
            "title": title,
            "content": output
        },
        "reprompt": {
            "outputSpeech": {
                "type": "PlainText",
                "text": reprompt_text
            }
        },
        "shouldEndSession": should_end_session
    }
    
def build_response(session_attributes, speechlet_response):
    return {
        "version": "1.0",
        "sessionAttributes": session_attributes,
        "response": speechlet_response
    }
    